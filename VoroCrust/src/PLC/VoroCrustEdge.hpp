#ifndef VOROCRUST_EDGE
#define VOROCRUST_EDGE

#include <vector>
#include <string>

#include "VoroCrustUsing.hpp"
#include "VoroCrustVertex.hpp"
#include "VoroCrustFace.hpp"

class VoroCrustEdge
{

public:
    //!\brief the start Vertex of the Edge 
    Vertex vertex1;
    //! \brief the end Vertex of the Edge 
    Vertex vertex2; 

    //! \brief the Faces incident to the Edge
    std::vector<Face> faces; 
    
    //! \brief Edge index in the plc edges array
    std::size_t index; 
    
    //! \brief true if edge is sharp
    bool isSharp;
    
    //! \brief true if edge is already assigned to a Crease
    bool isCreased; 

    std::size_t crease_index;

    /*! \brief Constructs an Edge starting at `v1` and ending at `v2`.
        \param v1 start Vertex of Edge.
        \param v2 end Vertex of Edge.
        \param index_  index of edge in the plc array.
    */
    VoroCrustEdge(Vertex const& v1, Vertex const& v2, std::size_t const index_);
    
    ~VoroCrustEdge() = default;

    /*! \brief if Edge is generated by Vertices v1, v2 in some configuration v1->v2 or v2->v1*/
    bool checkIfEqual(Vertex const& v1, Vertex const& v2);

    //! \brief adds a new face to the Edge's Faces vector
    void addFace(Face const& new_face);

    //! \brief calculates and returns the dihedral angle of the two faces (if there are exactly 2) incident to the Edge.
    double calcDihedralAngle();

    //! \brief flips the orientation of the Edge i.e. vertex1 = vertex2 and vice versa.
    void flipOrientation();

    //! \brief orient this to have the same orientation as `edge`
    //! assumes that either one of edge vertices concide
    void orientWithRespectTo(Edge const& edge);
    
    std::string repr();
};

#endif /* VOROCRUST_EDGE */ 
